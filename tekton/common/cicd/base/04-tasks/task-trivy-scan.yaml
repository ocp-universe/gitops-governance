# Task: Trivy - Vulnerability Scanner
# Source: https://github.com/IBM/ibm-garage-tekton-tasks/blob/main/tasks/3-img-scan-trivy.yaml
# v0.0.0
#
# Enhancements:
# - remove the git-clone step
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: img-scan-trivy
  annotations:
    description: Runs an image scan with Trivy and fails the build if issues are found.
    app.openshift.io/description: Runs an image scan with Trivy and fails the build if issues are found.
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: GIT_URL
      default: ''
      description: >-
        URL of git repo, if provided it allows .trivyignore to be used from
        project source when running scan
      type: string
    - name: GIT_REVISION
      default: master
      type: string
    - name: source-dir
      default: /source
      type: string
    - name: image-url
      description: "The location of image to scan <server>/<namespace>/<repository>>"
    - name: image-version
      description: "The image version/tag, will be concat with image-url to <server>/<namespace>/<repository>:<tag>"
      default: 'latest'
    - name: scan-image
      description: Flag indicating that a scan should be performed
      default: "false"
    - name: trivy-ignoreUnfixed
      description: Flag indicating that Trivy scans should ignore unfixed vulnerabilities 
      default: "true"
    - name: SKOPEO_IMAGE
      default: quay.io/containers/skopeo:v1.1.0
    - name: IMAGE_FROM_TLS_VERIFY
      default: "false"
    - name: TRIVY_IMAGE
      #default: quay.io/ibmgaragecloud/aquasec-trivy
      default: docker.io/aquasec/trivy:0.26.0@sha256:9199a32e4e9184eee3868f6774f30abf41e811696d894acee24f4fd3d794e829
  volumes:
    - name: oci-image
      emptyDir: {}
    - name: source
      emptyDir: {}
  stepTemplate:
    name: ''
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - name: pull-image
      image: $(params.SKOPEO_IMAGE)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      workingDir: $(params.source-dir)
      securityContext:
        privileged: true
      script: |
        #!/bin/sh

        PERFORM_SCAN="$(params.scan-image)"
        if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
          echo "User selected to skip scanning. Skipping Trivy scan."
          exit 0
        fi

        IMAGE_FROM=$(params.image-url):$(params.image-version)
        REGISTRY_SERVER_FROM=$(echo "${IMAGE_FROM}" | awk -F / '{print $1}')
        IMAGE_TO="oci:/var/oci/image"
        IMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)
        echo "Tagging ${IMAGE_FROM} as ${IMAGE_TO}"
        
        set +x
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "${REGISTRY_SERVER_FROM}" != "image-registry.openshift-image-registry.svc:5000" ]]; then
          IMAGE_FROM_CREDS="--src-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}"
        fi
        
        set -x
        if [ "${REGISTRY_SERVER_FROM}" =~ ":" ]; then
          IMAGE_FROM_TLS_VERIFY="false"
        fi
        
        echo "skopeo copy --src-creds=xxxx --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}"
        set +x
        skopeo copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}
    - name: scan-image
      image: $(params.TRIVY_IMAGE)
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      workingDir: $(params.source-dir)
      script: |
          #!/bin/sh

          PERFORM_SCAN="$(params.scan-image)"
          if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
            echo "User selected to skip scanning. Skipping Trivy scan."
            exit 0
          fi

          PATH_TO_IMAGE="/var/oci/image"

          echo -e "Trivy Security Scan image in registry"
          trivy image --exit-code 0 --format cyclonedx --output sbom-image.json --input ${PATH_TO_IMAGE}
          TRIVY_IGNORE_UNFIXED="$(params.trivy-ignoreUnfixed)" trivy image --exit-code 1 --severity CRITICAL --input ${PATH_TO_IMAGE}
          my_exit_code=$?
          echo "Scan exit code :--- $my_exit_code"
          if [ ${my_exit_code} == 1 ]; then
              echo -e "Trivy scanning completed. CRITICAL Vulnerabilities found."
              cat sbom-image.json
              exit 1
          else
            echo -e "Trivy scanning completed. CRITICAL vulnerabilities not found."
            exit 0
          fi
    