# Task: Code Risk Analyzer check
# Source: https://github.com/open-toolchain/tekton-catalog/tree/master/cra
# v0.0.0
#
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: cra-check
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    description: "Uses the IBM Cloud CLI to analyze your code for vulnerabilities and compliance with certain rules"
    app.openshift.io/description: CRA plug-in used to analyse code for vulnerabilities and compliance.
spec:
  description: >-
    You can use the CRA plug-in to complete the following tasks:
    Generate a Bill of Materials (BOM) file that lists dependencies on all third-party OS packages and application packages.
    Discover vulnerabilities in packages that are listed in the BOM file.
    Analyze Kubernetes files for compliance with certain rules.
    Any custom scripts or ignorefiles to be used in this task, should be place in a .cra directory
  params:
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "external-cr-push-secret"
    - name: docker-registry-secret
      description: Field in the secret that contains the secret used to login to docker-registry-url
      default: docker-registry-secret
    - name: ibmcloud-api
      description: The ibmcloud api
      default: "https://cloud.ibm.com"
    - name: ibmcloud-apikey-secret-key
      description: Field in the secret that contains the api key used to login to ibmcloud
      default: password
    - name: ibmcloud-region
      description: (Optional) ibmcloud region to use
      default: "eu-de"
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1
      default: "0"
    - name: registry-region
      description: (Optional) The ibmcloud container registry region
      default: "eu-de"
    - name: resource-group
      description: (Optional) Target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: CONTEXT_DIR
      description: Context directory in the workspace
      default: "."
      type: string
    - name: CONTEXT_DIR_CONFIG
      description: Context directory in the workspace for the deployment manifests
      default: "src_manifest"
    - name: CRA_ANALYSE_DEPLOYMENT
      description: Flag indicating if deployment manifests check should be performed
      default: "true"

    # Common command params
    - name: custom-script
      description: (Optional) A custom script to be ran prior to CRA scanning
      default: ""
    - name: env-props
      description: (Optional) A custom configuration of environment properties to source before execution, ex. 'export ABC=123 export DEF=456'
      default: ""
    - name: fileignore
      description: (Optional) Filepath to .fileignore
      default: ""
    - name: ibmcloud-trace
      description: (Optional) Enables IBMCLOUD_TRACE for ibmcloud cli logging
      default: "false"
    - name: output
      description: (Optional) Prints command result to console
      default: "false"
    - name: path
      description: Directory where the repository is cloned
      default: "."
    - name: strict
      description: (Optional) Enables strict mode for scanning
      default: "false"
    - name: TOOLCHAINID
      description: The target toolchain id to be used. Defaults to the current toolchain id
      default: ""
    - name: verbose
      description: (Optional) Enable verbose log messages
      default: "false"

    # BOM related parameters
    - name: asset-type
      description: Security checks to run (apps, image, os, all)
      default: "all"
    - name: bom-report
      description: Filepath to store generated Bill of Materials
      default: "bom_cra.json"
    - name: docker-build-flags
      description: (Optional) Customize docker build command for build stage scanning
      default: ""
    - name: docker-registry-url
      description: Registry url to use for docker login
      default: ""
    - name: docker-registry-username
      description: Username to authenticate for docker-registry-url
      default: ""
    - name: gradle-exclude-configs
      description: (Optional) Exclude gradle configurations, ex. 'runtimeClasspath,testCompileClasspath'
      default: ""
    - name: maven-exclude-scopes
      description: (Optional) Exclude maven scopes, ex. 'test,compile'
      default: ""
    - name: nodejs-create-package-lock
      description: (Optional) Enable the task to build the package-lock.json for node.js projects
      default: "false"
    - name: prev-report
      description: (Optional) Filepath to previous BoM report to skip Dockerfile or application manifest scans
      default: ""

    # Deploy Analytic related params
    - name: deploy-report
      description: Filepath to store generated Deploy Analytic report
      default: "deploy_cra.json"
    - name: helm_dir
      description: Filepath to helm manifests
      default: "helm"
    - name: helm_template_output
      description: Filepath where to generate helm templates into
      default: "work/config"

    # Vulnerability related parameters
    - name: cveignore
      description: (Optional) File path to cveignore
      default: ""
    - name: exclude-dev
      description: (Optional) Exclude dev dependencies during vulnerability scan
      default: "false"
    - name: vulnerability-report
      description: Filepath to store generated Vulnerability report, not stored if empty
      default: "vulnerability-report.json"

    # User control params
    - name: cra-scan-image
      description: Image to use for `scan` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2"

  stepTemplate:
    env:
      - name: WORKSPACE_PATH
        value: $(workspaces.source.path)
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: scan
      image: $(params.cra-scan-image)
      env:
        - name: API
          value: $(params.ibmcloud-api)
        - name: ENV_PROPS
          value: $(params.env-props)
        - name: REGION
          value: $(params.ibmcloud-region)
        - name: SCRIPT_CONTENTS
          value: $(params.custom-script)

        - name: IBM_CLOUD_APIKEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.docker-registry-secret)
              optional: true

        # Docker client configuration
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
      imagePullPolicy: Always
      workingDir: $(workspaces.source.path)
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          if [ "$PIPELINE_DEBUG" = "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          if [ -n "$ENV_PROPS" ]; then
            echo "${ENV_PROPS}" > ./env-props
            source ./env-props
          fi

          if [ -n "$SCRIPT_CONTENTS" ]; then
            echo "${SCRIPT_CONTENTS}" > ./input-script.sh
            source ./input-script.sh
          fi

          if [ -n "$REGION" ]; then
            TOOLCHAIN_REGION=$REGION
          fi

          if [ -n "$(params.TOOLCHAINID)" ]; then
            export TOOLCHAIN_ID=$(params.TOOLCHAINID)
          fi


          echo -e "\nFetching users's token"
          ibmcloud config --check-version false
          ibmcloud login -a $API --no-region --apikey $IBM_CLOUD_APIKEY
          SC=$?
          if [ $SC -gt 0 ]; then
            echo -e "Failed to login to ibmcloud"
            exit 1
          fi
          echo -e "Successfully logged into ibmcloud\n"

          # Install the CRA plugin if it is not installed
          CRA_VER=`ibmcloud plugin list |grep cra | awk '{print $2}'`
          if [ -z "$CRA_VER" ]; then
            ibmcloud plugin install cra -f
            STATUS=$?
            if [ $STATUS -gt 0 ]; then
              echo "Error installing CRA plugin. Exiting"
              exit 1
            fi
          else
            ibmcloud plugin update cra -f
            if [ $STATUS -gt 0 ]; then
              echo "Error updating CRA plugin. Using version $CRA_VER"
            fi
          fi

          # Install the Container Registry plugin if it is not installed
          CR_VER=`ibmcloud plugin list |grep container-registry | awk '{print $2}'`
          if [ -z "$CR_VER" ]; then
            ibmcloud plugin install container-registry -f
            STATUS=$?
            if [ $STATUS -gt 0 ]; then
              echo "Error installing Container Registry plugin. Exiting"
              exit 1
            fi
          else
            ibmcloud plugin update container-registry -f
            if [ $STATUS -gt 0 ]; then
              echo "Error updating Container Registry plugin. Using version $CR_VER"
            fi
          fi

          ibmcloud cr login

          if [ -n "$(params.resource-group)" ]; then
            ibmcloud target -g $(params.resource-group)
          fi

          if [ -n "$(params.registry-region)" ]; then
            echo -e "\nUpdating IBM Cloud Container Registry region"
            ibmcloud cr region-set $(params.registry-region)
          fi

          if [ -n "$(params.docker-registry-url)" ] && [ -n "$(params.docker-registry-username)" ] && [ -n "$REGISTRY_PASSWORD" ]; then
            echo $REGISTRY_PASSWORD | docker login $(params.docker-registry-url) -username $(params.docker-registry-username) ---password-stdin
          elif [ -n "$(params.docker-registry-url)" ] || [ -n "$(params.docker-registry-username)" ] || [ -n "$REGISTRY_PASSWORD" ]; then
            echo "Registry url, username, and secret are required. Continuing without authentication."
          fi

          if [ "$(params.ibmcloud-trace)" == "true" ]; then
            export IBMCLOUD_TRACE=true
          fi

          workDir=$(workspaces.source.path)/$(params.CONTEXT_DIR)

          cd $workDir

          echo -e "\n\nBeginning CRA discovery"
          BOM_CMD=(ibmcloud cra bom-generate --path $(params.path) --report $(params.bom-report) --asset-type $(params.asset-type) --region $TOOLCHAIN_REGION)
          if [ -n "$(params.gradle-exclude-configs)" ]; then
            BOM_CMD+=(--gradle.excludeconfigurations "$(params.gradle-exclude-configs)")
          fi
          if [ -n "$(params.maven-exclude-scopes)" ]; then
            BOM_CMD+=(--maven.excludescopes "$(params.maven-exclude-scopes)")
          fi
          if [ "$(params.nodejs-create-package-lock)" == "true" ]; then
            BOM_CMD+=(--nodejs.createpackagelock)
          fi
          if [ -n "$(params.prev-report)" ]; then
            BOM_CMD+=(--prev-report $(params.prev-report))
          fi
          if [ "$(params.verbose)" == "true" ]; then
            BOM_CMD+=(--verbose)
          fi
          if [ -n "$(params.docker-build-flags)" ]; then
            BOM_CMD+=(--dockerbuildflags "$(params.docker-build-flags)")
          fi
          echo "${BOM_CMD[@]}"
          "${BOM_CMD[@]}"
          BOM_STATUS=$?

          if [ "$(params.output)" == "true" ]; then
            cat $(params.bom-report)
          fi

          echo -e "\n\nBeginning CRA vulnerability scan"
          VULNERABILITY_CMD=(ibmcloud cra vulnerability-scan --bom $(params.bom-report) --report $(params.vulnerability-report) --region $TOOLCHAIN_REGION)
          if [ -n "$(params.cveignore)" ]; then
            VULNERABILITY_CMD+=(--cveignore $(params.cveignore))
          fi
          if [ "$(params.exclude-dev)" == "true" ]; then
            VULNERABILITY_CMD+=(--excludedev)
          fi
          if [ "$(params.strict)" == "true" ]; then
            VULNERABILITY_CMD+=(--strict)
          fi
          echo "${VULNERABILITY_CMD[@]}"
          "${VULNERABILITY_CMD[@]}"
          VULNERABILITY_STATUS=$?

          if [ "$(params.output)" == "true" ]; then
            cat $(params.vulnerability-report)
          fi

          PERFORM_ACT="$(params.CRA_ANALYSE_DEPLOYMENT)"
          if [ "${PERFORM_ACT}" == "true" ]; then

            cd $(params.CONTEXT_DIR_CONFIG)

            helm template config $(params.helm_dir) --output-dir=$(params.helm_template_output)

            echo -e "\n\nBeginning CRA Deploy Analytic"
            DEPLOY_CMD=(ibmcloud cra deployment-analyze --path $(params.path) --report ../$(params.deploy-report) --region $TOOLCHAIN_REGION)

            if [ -n "$(params.fileignore)" ]; then
              DEPLOY_CMD+=(--fileignore $(params.fileignore))
            fi
            if [ "$(params.strict)" == "true" ]; then
              DEPLOY_CMD+=(--strict)
            fi
            echo "${DEPLOY_CMD[@]}"
            "${DEPLOY_CMD[@]}"
            DEPLOY_STATUS=$?
            if [ "$(params.output)" == "true" ]; then
              cat $(params.deploy-report)
            fi
          else
            DEPLOY_STATUS=0
          fi

          if [ $(expr $BOM_STATUS + $VULNERABILITY_STATUS + $DEPLOY_STATUS) -gt 0 ]; then
            exit 1
          fi
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs

  sidecars:
    - image: icr.io/continuous-delivery/pipeline/docker:19.03.15-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
          apk add e2fsprogs &&
          truncate -s 20G /tmp/disk.img &&
          mkfs.ext4 /tmp/disk.img &&
          mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]

  workspaces:
  - name: source

  volumes:
    - name: dind-certs
      emptyDir: {}
